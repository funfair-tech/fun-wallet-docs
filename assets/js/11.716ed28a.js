(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{385:function(e,t,r){"use strict";r.r(t);var a=r(22),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"funfair-wallet-ethereum-provider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#funfair-wallet-ethereum-provider"}},[e._v("#")]),e._v(" FunFair Wallet Ethereum Provider")]),e._v(" "),r("h2",{attrs:{id:"what-is-an-ethereum-provider"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#what-is-an-ethereum-provider"}},[e._v("#")]),e._v(" What is an Ethereum Provider?")]),e._v(" "),r("p",[e._v("ðŸ’¡ Most dApps use either web3 or etherjs to read from and write to the blockchain directly from the client.")]),e._v(" "),r("p",[e._v("ðŸ’¡ These libraries follow best practices, and expose interfaces that should allow you to do everything necessary for blockchain development.")]),e._v(" "),r("p",[e._v("ðŸ’¡ Also, the nodes and signing all need to happen in the Wallet client not the dApp client as only the Wallet client has access to the necessary context information.")]),e._v(" "),r("p",[e._v("ðŸ’¡ An Ethereum provider is something you can inject into the constructor of web3 or etherjs and override the point at which it makes the JSON-RPC call.")]),e._v(" "),r("p",[e._v("ðŸ’¡ Minimal changes, if any, should be required to the web3/etherjs code.")]),e._v(" "),r("p",[e._v("ðŸ’¡ Once done, our Ethereum provider will proxy all the JSON-RPC calls to the Wallet.")]),e._v(" "),r("h2",{attrs:{id:"ethereum-provider-flow"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ethereum-provider-flow"}},[e._v("#")]),e._v(" Ethereum Provider Flow")]),e._v(" "),r("p",[e._v("Click on the image to zoom in.")]),e._v(" "),r("img",{attrs:{src:e.$withBase("/fun-wallet-provider-flow.png")}})])}),[],!1,null,null,null);t.default=o.exports}}]);